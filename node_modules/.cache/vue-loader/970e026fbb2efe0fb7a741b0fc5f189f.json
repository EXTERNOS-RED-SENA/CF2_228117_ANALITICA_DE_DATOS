{"remainingRequest":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/src/views/Tema2.vue?vue&type=template&id=9299eeca&lang=pug","dependencies":[{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/src/views/Tema2.vue","mtime":1732537026516},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF2_228117_ANALITICA_DE_DATOS/CF2_228117_ANALITICA_DE_DATOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01LmZvbmRvLTMKICAgIC50aXR1bG8tcHJpbmNpcGFsLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgLnRpdHVsby1wcmluY2lwYWxfX251bWVybwogICAgICAgIHNwYW4gMgogICAgICBoMSBOaXZlbGVzIGRlIG1lZGljacOzbgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctMS5tYi1sZy0wLm1iLTMuZC1sZy1ibG9jay5kLW5vbmU6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM0LnN2ZycsIGFsdD0nJykKICAgICAgLmNvbC1sZy0xMTogcC5tYi0wIExvcyBuaXZlbGVzIGRlIG1lZGljacOzbiBzZSB1c2FuIGFtcGxpYW1lbnRlIGVuIGVzdGFkw61zdGljYSwgeWEgcXVlIGRldGVybWluYW4gZWwgdGlwbyBkZSBvcGVyYWNpb25lcyBtYXRlbcOhdGljYXMgcXVlIHNlIHB1ZWRlbiByZWFsaXphciBjb24gbG9zIGRhdG9zIHkgcXXDqSB0aXBvcyBkZSBhbsOhbGlzaXMgZXN0YWTDrXN0aWNvcyBzb24gYXByb3BpYWRvcy4gQ2FkYSB2YXJpYWJsZSBzZSBtaWRlIGVuIHVubyBkZSBsb3MgY3VhdHJvIG5pdmVsZXMgZGUgbWVkaWNpw7NuOiBub21pbmFsLCBvcmRpbmFsLCBkZSBpbnRlcnZhbG8geSBkZSByYXrDs24uIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy03LmNvbC0xMC5tYi1sZy0wLm1iLTMKICAgICAgICBwLm1iLTQgQ2FkYSBuaXZlbCBkZSBtZWRpY2nDs24gcG9zZWUgc3VzIHByb3BpYXMgbGltaXRhY2lvbmVzIHkgZm9ydGFsZXphcyBlbiBjdWFudG8gYSBsYXMgb3BlcmFjaW9uZXMgbWF0ZW3DoXRpY2FzIHkgbG9zIHRpcG9zIGRlIHBydWViYXMgZXN0YWTDrXN0aWNhcyBxdWUgc2UgcHVlZGVuIGFwbGljYXIuIFBvciBlamVtcGxvLCBhbmFsaXphciBkYXRvcyBkZSBuaXZlbCBub21pbmFsIGNvbiB0w6ljbmljYXMgZGlzZcOxYWRhcyBwYXJhIG5pdmVsZXMgZGUgaW50ZXJ2YWxvIG8gZGUgcmF6w7NuIHB1ZWRlIGNvbmR1Y2lyIGEgZXJyb3JlcyBzaWduaWZpY2F0aXZvcyBlbiBsYSBpbnRlcnByZXRhY2nDs24sIHlhIHF1ZSBubyBoYXkgdW5hIGJhc2UgY3VhbnRpdGF0aXZhIHbDoWxpZGEgcGFyYSByZWFsaXphciBvcGVyYWNpb25lcyBtYXRlbcOhdGljYXMgYXZhbnphZGFzIGVuIGRhdG9zIGNhdGVnw7NyaWNvcy4KICAgICAgICAucC00KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRDdFRUQ2ICIpCiAgICAgICAgICBwLm1iLTAgVW5hIGVsZWNjacOzbiBpbmNvcnJlY3RhIGRlbCBuaXZlbCBkZSBtZWRpY2nDs24gcHVlZGUgbGxldmFyIGEgY29uY2x1c2lvbmVzIGVycsOzbmVhcyBvIGEgbWFsaW50ZXJwcmV0YXIgbGFzIHJlbGFjaW9uZXMgZW50cmUgdmFyaWFibGVzLCBsbyBjdWFsIHB1ZWRlIHRlbmVyIHNlcmlhcyByZXBlcmN1c2lvbmVzLCBlc3BlY2lhbG1lbnRlIGVuIMOhbWJpdG9zIGNvbW8gbGEgaW52ZXN0aWdhY2nDs24gY2llbnTDrWZpY2EsIGxhIGVjb25vbcOtYSB5IGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbXByZXNhcmlhbGVzLiBQb3IgZWplbXBsbywgc2kgc2UgdHJhdGEgdW5hIHZhcmlhYmxlIG9yZGluYWwgY29tbyBzaSBmdWVyYSBkZSBpbnRlcnZhbG8gKHNpbiBjb25zaWRlcmFyIHF1ZSBsYXMgZGlzdGFuY2lhcyBlbnRyZSBjYXRlZ29yw61hcyBubyBzb24gaWd1YWxlcyksIHNlIHBvZHLDrWEgY29uY2x1aXIgZXF1aXZvY2FkYW1lbnRlIHF1ZSBsYXMgZGlmZXJlbmNpYXMgZW50cmUgY2F0ZWdvcsOtYXMgc29uIGVxdWl2YWxlbnRlcywgbG8gY3VhbCBhZmVjdGFyw61hIGxhIHZhbGlkZXogZGUgbG9zIHJlc3VsdGFkb3MgeSBwb2Ryw61hIGluZmx1aXIgbmVnYXRpdmFtZW50ZSBlbiBsYXMgZGVjaXNpb25lcyBiYXNhZGFzIGVuIGVzdG9zIGRhdG9zLgogICAgICAuY29sLWxnLTUuY29sLTg6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM1LnBuZycsIGFsdD0nJykKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTMuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNi5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOQogICAgICAgIC5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFNUU5RUIiKQogICAgICAgICAgcC5tYi0wIFBvciBvdHJvIGxhZG8sIHVuYSBzZWxlY2Npw7NuIHByZWNpc2EgZGVsIG5pdmVsIGRlIG1lZGljacOzbiBhc2VndXJhIHF1ZSBsb3MgYW7DoWxpc2lzIGVzdGFkw61zdGljb3Mgc2VhbiBhcHJvcGlhZG9zIHkgcXVlIGxvcyByZXN1bHRhZG9zIG9idGVuaWRvcyBzZWFuIHJvYnVzdG9zIHkgc2lnbmlmaWNhdGl2b3MuIEFsIHV0aWxpemFyIGVsIG5pdmVsIGRlIG1lZGljacOzbiBjb3JyZWN0bywgc2UgZ2FyYW50aXphIHF1ZSBsYXMgdMOpY25pY2FzIGVzdGFkw61zdGljYXMgYXBsaWNhZGFzIGNvcnJlc3BvbmRhbiBhIGxhcyBjYXJhY3RlcsOtc3RpY2FzIGRlIGxvcyBkYXRvcywgbWF4aW1pemFuZG8gYXPDrSBsYSBwcmVjaXNpw7NuIHkgY29uZmlhYmlsaWRhZCBkZSBsb3MgaGFsbGF6Z29zLiBBZGVtw6FzLCB1bmEgZWxlY2Npw7NuIGFkZWN1YWRhIHBlcm1pdGUgdW4gdXNvIG3DoXMgZWZpY2llbnRlIGRlIGxvcyBkYXRvcywgeWEgcXVlIGNhZGEgbml2ZWwgZGUgbWVkaWNpw7NuIGFicmUgbGEgcHVlcnRhIGEgZGlzdGludG9zIG3DqXRvZG9zIGFuYWzDrXRpY29zLCBkZXNkZSBzaW1wbGVzIGNvbnRlb3MgaGFzdGEgbW9kZWxvcyBjb21wbGVqb3MgZGUgcmVncmVzacOzbiB5IGFuw6FsaXNpcyBkZSB2YXJpYW56YS4gRW4gw7psdGltYSBpbnN0YW5jaWEsIHVuYSBjb3JyZWN0YSBzZWxlY2Npw7NuIGRlbCBuaXZlbCBkZSBtZWRpY2nDs24gcGVybWl0ZSBvYnRlbmVyIGluc2lnaHRzIG3DoXMgcHJvZnVuZG9zIHkgcmVsZXZhbnRlcywgcHJvbW92aWVuZG8gZGVjaXNpb25lcyBpbmZvcm1hZGFzIHkgYmFzYWRhcyBlbiBldmlkZW5jaWEuCiAgICAvLy0gLnRpdHVsby10cmVzLm1iLTQ6IGgzLm1iLTAgQ8OzbW8gZXNjb2dlciBlbCBuaXZlbCBkZSBtZWRpY2nDs24gYWRlY3VhZG8gZW4gY2luY28gcGFzb3MKICAgIC8vLSAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgLy8tICAgLmNvbC1sZy00LmQtbGctYmxvY2suZC1ub25lOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNy5wbmcnLCBhbHQ9JycpCiAgICAvLy0gICAuY29sLWxnLTgKICAgIC8vLSAgICAgTGluZWFUaWVtcG9ELmNvbG9yLXNlY3VuZGFyaW8KICAgIC8vLSAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSIxIiB0aXR1bG89IiBJZGVudGlmaWNhIGxhIG5hdHVyYWxlemEgZGUgbGEgdmFyaWFibGUiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRTJEQUNDIikgRGV0ZXJtaW5hIHNpIGxvcyBkYXRvcyByZXByZXNlbnRhbiBjYXRlZ29yw61hcywgb3JkZW4gamVyw6FycXVpY28gbyBjYW50aWRhZGVzLiBQcmVndW50YSBzaSBsYSB2YXJpYWJsZSBjbGFzaWZpY2EgZWxlbWVudG9zIChub21pbmFsKSwgZXN0YWJsZWNlIHVuIG9yZGVuIChvcmRpbmFsKSBvIG1pZGUgZGlmZXJlbmNpYXMgcHJlY2lzYXMgKGludGVydmFsbyBvIHJhesOzbikuIFBvciBlamVtcGxvLCBwYXJhIGVsIGNvbG9yIGRlIHVuIHByb2R1Y3RvLCBlbCBuaXZlbCBlcyBub21pbmFsOyBwYXJhIGxhIHNhdGlzZmFjY2nDs24gZGVsIGNsaWVudGUsIG9yZGluYWwuCiAgICAvLy0gICAgICAgcC50ZXh0LXNtYWxsKG51bWVybz0iMiIgdGl0dWxvPSJFdmFsw7phIGVsIHByb3DDs3NpdG8gZGVsIGFuw6FsaXNpcyIpIEVzdGFibGVjZSBjw7NtbyBzZSB1dGlsaXphcsOhbiBsb3MgZGF0b3MuIFNpIG5lY2VzaXRhcyByZWFsaXphciBjw6FsY3Vsb3MgYXZhbnphZG9zLCBjb21vIHByb21lZGlvcyBvIHJlZ3Jlc2lvbmVzLCBlcyBjcnVjaWFsIHF1ZSBsYXMgdmFyaWFibGVzIHNlYW4gZGUgaW50ZXJ2YWxvIG8gcmF6w7NuLiBQYXJhIGVzdHVkaW9zIGRlIGZyZWN1ZW5jaWFzLCBsYXMgZXNjYWxhcyBub21pbmFsZXMgdSBvcmRpbmFsZXMgc3VlbGVuIHNlciBzdWZpY2llbnRlcy4KICAgIC8vLSAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSIzIiB0aXR1bG89IkNvbXBydWViYSBsYSBuYXR1cmFsZXphIGRlbCBjZXJvIikgVmVyaWZpY2Egc2kgZWwgY2VybyBlbiB0dXMgZGF0b3MgdGllbmUgc2lnbmlmaWNhZG8gYWJzb2x1dG8gbyByZWxhdGl2by4gTGFzIGVzY2FsYXMgZGUgcmF6w7NuIHRpZW5lbiB1biBjZXJvIGFic29sdXRvIChwZXNvIG8gaW5ncmVzb3MpLCBtaWVudHJhcyBxdWUgbGFzIGRlIGludGVydmFsbyBubyBsbyB0aWVuZW4gKHRlbXBlcmF0dXJhIGVuIENlbHNpdXMpLiBFc3RlIGRldGFsbGUgZGV0ZXJtaW5hIHNpIHB1ZWRlcyByZWFsaXphciBkaXZpc2lvbmVzIG8gbXVsdGlwbGljYWNpb25lcy4KICAgIC8vLSAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSI0IiB0aXR1bG89IkFuYWxpemEgbGFzIHJlbGFjaW9uZXMgZW50cmUgbGFzIGNhdGVnb3LDrWFzIikgRW4gdmFyaWFibGVzIG9yZGluYWxlcywgbGFzIGRpc3RhbmNpYXMgZW50cmUgY2F0ZWdvcsOtYXMgbm8gc29uIHVuaWZvcm1lcywgbWllbnRyYXMgcXVlIGVuIGxhcyBkZSBpbnRlcnZhbG8geSByYXrDs24gc8OtLiBVc2EgZXN0YXMgZGlmZXJlbmNpYXMgcGFyYSBkZWNpZGlyIHNpIHB1ZWRlcyBhcGxpY2FyIG1lZGlkYXMgY29tbyBkZXN2aWFjacOzbiBlc3TDoW5kYXIgbyBhbsOhbGlzaXMgcGFyYW3DqXRyaWNvcy4KICAgIC8vLSAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSI1IiB0aXR1bG89IkNvbnN1bHRhIGNvbiBsYXMgcGFydGVzIGludGVyZXNhZGFzIikgSW52b2x1Y3JhIGEgZXhwZXJ0b3MgZW4gZXN0YWTDrXN0aWNhIG8gYWwgZXF1aXBvIGRlIGFuw6FsaXNpcyBwYXJhIGdhcmFudGl6YXIgcXVlIGxhcyB2YXJpYWJsZXMgeSBtw6l0b2RvcyBzZWxlY2Npb25hZG9zIHNlYW4gYWRlY3VhZG9zIHBhcmEgbG9zIG9iamV0aXZvcyBkZWwgcHJveWVjdG8uIEVzdG8gYXNlZ3VyYSBxdWUgbG9zIHJlc3VsdGFkb3Mgc2VhbiBpbnRlcnByZXRhYmxlcyB5IHJlbGV2YW50ZXMgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTUuY29sLTcubWItbGctMC5tYi0zCiAgICAgICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgICAgIGg1IEZpZ3VyYSAzLgogICAgICAgICAgc3BhbiBOaXZlbGVzIGRlIG1lZGljacOzbgogICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM4LnN2ZycsIGFsdD0nJykKICAgICAgLmNvbC1sZy03LmNvbC04OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80MC5zdmcnLCBhbHQ9JycpCiAgICBTZXBhcmFkb3IgCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDIuMQlOaXZlbCBkZSBtZWRpY2nDs24gbm9taW5hbAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy05Lm1iLWxnLTAubWItMwogICAgICAgIHAubWItNCBFbCBuaXZlbCBub21pbmFsIGVzIGVsIG3DoXMgYsOhc2ljbyBkZSBsb3MgY3VhdHJvIG5pdmVsZXMuIFNlIHV0aWxpemEgcGFyYSB2YXJpYWJsZXMgY3VhbGl0YXRpdmFzIHF1ZSBhZ3J1cGFuIGEgbG9zIGluZGl2aWR1b3MgdSBvYmpldG9zIGVuIGNhdGVnb3LDrWFzIHNpbiB1biBvcmRlbiBpbnRyw61uc2Vjby4gTm8gZXhpc3RlIHVuIHZhbG9yIG51bcOpcmljbyBhc29jaWFkbyBjb24gZXN0YXMgY2F0ZWdvcsOtYXMsIHkgbm8gZXMgcG9zaWJsZSByZWFsaXphciBvcGVyYWNpb25lcyBtYXRlbcOhdGljYXMgY29uIGVsbGFzLgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgIC50YXJqZXRhLnAtNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0U1RTlFQiIpCiAgICAgICAgICAgICAgaDUgQ2FyYWN0ZXLDrXN0aWNhcwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wIExvcyBkYXRvcyBzZSBhZ3J1cGFuIGVuIGNhdGVnb3LDrWFzIG8gZXRpcXVldGFzLgogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wIE5vIGV4aXN0ZSB1biBvcmRlbiBuaSBqZXJhcnF1w61hIGVudHJlIGxhcyBjYXRlZ29yw61hcy4KICAgICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgIHAubWItMCBObyBlcyBwb3NpYmxlIGhhY2VyIGPDoWxjdWxvcyBtYXRlbcOhdGljb3MgZW50cmUgbG9zIHZhbG9yZXMuCiAgICAgICAgICAuY29sLWxnLTYKICAgICAgICAgICAgaDUgRWplbXBsbwogICAgICAgICAgICAucC0yLm1iLTMucm91bmRlZC0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjQzZFOUYzIikKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItMAogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTAKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wICNbYiBHw6luZXJvOl0gbWFzY3VsaW5vLCBmZW1lbmlubywgb3Ryby4KICAgICAgICAgICAgLnAtMi5tYi0zLnJvdW5kZWQtMyhzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0M2RTlGMyIpCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLm1iLTAKICAgICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgIHAubWItMCAjW2IgQ29sb3IgZGUgb2pvczpdIGF6dWwsIG1hcnLDs24sIHZlcmRlLCBuZWdyby4KICAgICAgLmNvbC1sZy0zLmNvbC03OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80MS5zdmcnLCBhbHQ9JycpCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTEwLm1iLWxnLTAubWItMyAKICAgICAgICAudGFyamV0YS5wLTQoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMxMDMxNGIgIikKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy0xLmNvbC0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zLnN2ZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy0xMTogcC5tYi0wLnRleHQtd2hpdGUgRWwgYW7DoWxpc2lzIGRlIGxhcyB2YXJpYWJsZXMgbm9taW5hbGVzIHNlIGJhc2EgZW4gbGEgZnJlY3VlbmNpYSBkZSBhcGFyaWNpw7NuIGRlIGNhZGEgY2F0ZWdvcsOtYS4gUG9yIGVqZW1wbG8sIGVuIHVuIGVzdHVkaW8gZGUgbWVyY2FkbywgcG9kcsOtYW1vcyBvYnNlcnZhciBjdcOhbnRvcyBjbGllbnRlcyBwcmVmaWVyZW4gdW5hIG1hcmNhIGVzcGVjw61maWNhLgogICAgU2VwYXJhZG9yCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDIuMglOaXZlbCBkZSBtZWRpY2nDs24gb3JkaW5hbAogICAgcC5tYi01KGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykgRWwgbml2ZWwgb3JkaW5hbCB0YW1iacOpbiBzZSB1dGlsaXphIHBhcmEgdmFyaWFibGVzIGN1YWxpdGF0aXZhcywgcGVybyBhIGRpZmVyZW5jaWEgZGVsIG5pdmVsIG5vbWluYWwsIGxhcyBjYXRlZ29yw61hcyB0aWVuZW4gdW4gb3JkZW4gbyBqZXJhcnF1w61hLiBTaW4gZW1iYXJnbywgbGFzIGRpZmVyZW5jaWFzIGVudHJlIGxhcyBjYXRlZ29yw61hcyBubyBzb24gY3VhbnRpZmljYWJsZXMuIEF1bnF1ZSBzZSBwdWVkZSBlc3RhYmxlY2VyIHVuIHJhbmdvLCBubyBzZSBwdWVkZW4gcmVhbGl6YXIgY8OhbGN1bG9zIHByZWNpc29zIGNvbiBsYXMgZGlmZXJlbmNpYXMgZW50cmUgbGFzIGNhdGVnb3LDrWFzLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0yLmNvbC02Lm1iLWxnLTAubWItMzogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDIuc3ZnJywgYWx0PScnKQogICAgICAuY29sLWxnLTYubWItbGctMC5tYi0zCiAgICAgICAgLnRhcmpldGEucC00KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRTVFOUVCIikKICAgICAgICAgICAgICBoNSBDYXJhY3RlcsOtc3RpY2FzCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgICBsaS5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICBwLm1iLTAgTG9zIGRhdG9zIHNlIGFncnVwYW4gZW4gY2F0ZWdvcsOtYXMgY29uIHVuIG9yZGVuIG8gamVyYXJxdcOtYS4KCiAgICAgICAgICAgICAgICBsaS5kLWZsZXgubWItMQogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICBwLm1iLTAgTm8gc2UgcHVlZGUgbWVkaXIgbGEgbWFnbml0dWQgZXhhY3RhIGRlIGxhIGRpZmVyZW5jaWEgZW50cmUgbGFzIGNhdGVnb3LDrWFzLgogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wIE5vIHNlIHB1ZWRlbiByZWFsaXphciBvcGVyYWNpb25lcyBhcml0bcOpdGljYXMgZW50cmUgbG9zIHZhbG9yZXMuCiAgICAgIC5jb2wtbGctNAogICAgICAgIGg1IEVqZW1wbG8KICAgICAgICAucC0yLm1iLTMucm91bmRlZC0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjQzZFOUYzIikKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5tYi0wCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICBwLm1iLTAgI1tiIE5pdmVsIGRlIHNhdGlzZmFjY2nDs246XSBpbnNhdGlzZmVjaG8sIG5ldXRyYWwsIHNhdGlzZmVjaG8uCiAgICAgICAgLnAtMi5tYi0zLnJvdW5kZWQtMyhzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0M2RTlGMyIpCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItMAogICAgICAgICAgICBsaS5kLWZsZXgubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBDbGFzaWZpY2FjacOzbiBlbiB1bmEgY2FycmVyYTpdIHByaW1lciBsdWdhciwgc2VndW5kbyBsdWdhciwgdGVyY2VyIGx1Z2FyLgogICAgcC5tYi01KGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykgRWwgYW7DoWxpc2lzIGVzdGFkw61zdGljbyBkZSBsYXMgdmFyaWFibGVzIG9yZGluYWxlcyBwdWVkZSBpbmNsdWlyIGVsIGPDoWxjdWxvIGRlIGxhIG1lZGlhbmEgbyBlbCB1c28gZGUgcHJ1ZWJhcyBubyBwYXJhbcOpdHJpY2FzLCBjb21vIGxhIHBydWViYSBkZSByYW5nb3MgZGUgV2lsY294b24uIEVuIGVsIGNhc28gZGUgdW5hIGVuY3Vlc3RhIHNvYnJlIGxhIHNhdGlzZmFjY2nDs24gZGVsIGNsaWVudGUsIHNlIHB1ZWRlIGNhbGN1bGFyIGVsIHBvcmNlbnRhamUgZGUgY2xpZW50ZXMgZW4gY2FkYSBuaXZlbCBkZSBzYXRpc2ZhY2Npw7NuLgogICAgU2VwYXJhZG9yCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDIuMwlOaXZlbCBkZSBtZWRpY2nDs24gZGUgaW50ZXJ2YWxvCiAgICBwLm1iLTUoZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKSBFbCAjW2Igbml2ZWwgZGUgaW50ZXJ2YWxvXSBlcyBlbCBwcmltZXIgbml2ZWwgcXVlIHNlIHVzYSBwYXJhIHZhcmlhYmxlcyBjdWFudGl0YXRpdmFzLiBFbiBlc3RlIG5pdmVsLCBsb3MgZGF0b3Mgbm8gc29sbyB0aWVuZW4gdW4gb3JkZW4sIHNpbm8gcXVlIGxhcyBkaWZlcmVuY2lhcyBlbnRyZSBsb3MgdmFsb3JlcyBzb24gbWVkaWJsZXMgeSBzaWduaWZpY2F0aXZhcy4gU2luIGVtYmFyZ28sIG5vIGV4aXN0ZSB1biAiY2VybyBhYnNvbHV0byIsIGxvIHF1ZSBzaWduaWZpY2EgcXVlIG5vIHNlIHB1ZWRlbiByZWFsaXphciBvcGVyYWNpb25lcyBtdWx0aXBsaWNhdGl2YXMgZW50cmUgbG9zIHZhbG9yZXMuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80My5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIGg1IENhcmFjdGVyw61zdGljYXMKICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItNAogICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgcC5tYi0wIExhcyBkaWZlcmVuY2lhcyBlbnRyZSBsb3MgdmFsb3JlcyBzb24gY29uc2lzdGVudGVzIHkgbWVkaWJsZXMuCiAgICAgICAgICBsaS5kLWZsZXgubWItMQogICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICBwLm1iLTAgTm8gZXhpc3RlIHVuICJjZXJvIGFic29sdXRvIjsgZWwgdmFsb3IgY2VybyBlcyBhcmJpdHJhcmlvLgogICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgcC5tYi0wIFNlIHB1ZWRlbiByZWFsaXphciBvcGVyYWNpb25lcyBhcml0bcOpdGljYXMgY29tbyBsYSBzdW1hIG8gbGEgcmVzdGEsIHBlcm8gbm8gbGEgbXVsdGlwbGljYWNpw7NuIG8gZGl2aXNpw7NuLgogICAgICAgIC50YXJqZXRhKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjNGMEVBIikucC00CiAgICAgICAgICBoNSBFamVtcGxvCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItMAogICAgICAgICAgICBsaS5kLWZsZXgubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBUZW1wZXJhdHVyYSBlbiBncmFkb3MgQ2Vsc2l1czpdIDIwwrBDLCAzMMKwQywgNDDCsEMuIEFxdcOtLCBsYSBkaWZlcmVuY2lhIGVudHJlIDIwwrBDIHkgMzDCsEMgZXMgbGEgbWlzbWEgcXVlIGVudHJlIDMwwrBDIHkgNDDCsEMsIHBlcm8gMMKwQyBubyByZXByZXNlbnRhIHVuYSBhdXNlbmNpYSBkZSB0ZW1wZXJhdHVyYS4KCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICBwLm1iLTAgI1tiIEZlY2hhcyBlbiB1biBjYWxlbmRhcmlvOl0gbGEgZGlmZXJlbmNpYSBlbnRyZSBlbCBhw7FvIDIwMDAgeSBlbCBhw7FvIDE5OTAgZXMgZGUgMTAgYcOxb3MsIHBlcm8gZWwgYcOxbyAiMCIgbm8gZXMgdW4gcHVudG8gZGUgcmVmZXJlbmNpYSBhYnNvbHV0by4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctMTAubWItbGctMC5tYi0zIAogICAgICAgIC50YXJqZXRhLnAtNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzEwMzE0YiAiKQogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLTEuY29sLTM6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ0LnN2ZycsIGFsdD0nJykKICAgICAgICAgICAgLmNvbC1sZy0xMTogcC5tYi0wLnRleHQtd2hpdGUgRW4gZWwgYW7DoWxpc2lzIGVzdGFkw61zdGljbyBkZSB2YXJpYWJsZXMgZGUgaW50ZXJ2YWxvLCBzZSBwdWVkZW4gY2FsY3VsYXIgbWVkaWRhcyBjb21vIGxhIG1lZGlhIG8gbGEgZGVzdmlhY2nDs24gZXN0w6FuZGFyLiBTaW4gZW1iYXJnbywgbGEgZmFsdGEgZGUgdW4gImNlcm8gYWJzb2x1dG8iIGltcGlkZSBxdWUgc2UgcmVhbGljZW4gY2llcnRhcyBvcGVyYWNpb25lcywgY29tbyBjb21wYXJhciByYXpvbmVzIGVudHJlIHZhbG9yZXMuCiAgICBTZXBhcmFkb3IKICAgICN0XzJfNC50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgMi40CU5pdmVsIGRlIG1lZGljacOzbiBkZSByYXrDs24KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctMTAubWItbGctMC5tYi0zCiAgICAgICAgcC5tYi00IEVsIG5pdmVsIGRlIHJhesOzbiBlcyBlbCBuaXZlbCBtw6FzIGFsdG8gZGUgbWVkaWNpw7NuIHkgc2UgYXBsaWNhIGEgdmFyaWFibGVzIGN1YW50aXRhdGl2YXMgcXVlLCBhZGVtw6FzIGRlIHRlbmVyIGRpZmVyZW5jaWFzIG1lZGlibGVzIGVudHJlIGxvcyB2YWxvcmVzLCBjdWVudGFuIGNvbiB1biAiY2VybyBhYnNvbHV0byIuIEVzdG8gc2lnbmlmaWNhIHF1ZSBzZSBwdWVkZW4gcmVhbGl6YXIgdG9kYXMgbGFzIG9wZXJhY2lvbmVzIGFyaXRtw6l0aWNhcywgaW5jbHVpZGFzIGxhIG11bHRpcGxpY2FjacOzbiB5IGxhIGRpdmlzacOzbiwgeWEgcXVlIGVsIGNlcm8gZW4gZXN0ZSBuaXZlbCBpbmRpY2EgbGEgYXVzZW5jaWEgdG90YWwgZGUgbGEgY2FyYWN0ZXLDrXN0aWNhIG1lZGlkYS4KICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAudGFyamV0YS5wLTUoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFNUU5RUIiKQogICAgICAgICAgICAgIGg1IENhcmFjdGVyw61zdGljYXMKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgIHAubWItMCBFeGlzdGVuIGRpZmVyZW5jaWFzIGNvbnNpc3RlbnRlcyB5IG1lZGlibGVzIGVudHJlIGxvcyB2YWxvcmVzLgogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTEKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wIEV4aXN0ZSB1biAiY2VybyBhYnNvbHV0byIsIGxvIHF1ZSBwZXJtaXRlIHJlYWxpemFyIG9wZXJhY2lvbmVzIG11bHRpcGxpY2F0aXZhcy4KICAgICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0xCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgIHAubWItMCBTZSBwdWVkZW4gcmVhbGl6YXIgdG9kYXMgbGFzIG9wZXJhY2lvbmVzIGFyaXRtw6l0aWNhczogc3VtYSwgcmVzdGEsIG11bHRpcGxpY2FjacOzbiB5IGRpdmlzacOzbi4KICAgICAgICAgICAgICAgIAogICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgIGg1IEVqZW1wbG8KICAgICAgICAgICAgLnAtMy5tYi0zLnJvdW5kZWQtMyhzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0M2RTlGMyIpCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLm1iLTAKICAgICAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgIHAubWItMCAjW2IgUGVzbzpdIHVuIG9iamV0byBxdWUgcGVzYSAwIGtnIG5vIHRpZW5lIG1hc2EuIEVzIGRlY2lyLCB1biBvYmpldG8gcXVlIHBlc2EgNCBrZyBlcyBlbCBkb2JsZSBkZSBwZXNhZG8gcXVlIHVubyBxdWUgcGVzYSAyIGtnLgogICAgICAgICAgICAucC0zLm1iLTMucm91bmRlZC0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjQzZFOUYzIikKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItMAogICAgICAgICAgICAgICAgbGkuZC1mbGV4Lm1iLTAKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgcC5tYi0wICNbYiBJbmdyZXNvczpdIHNpIHVuYSBwZXJzb25hIHRpZW5lIDAgaW5ncmVzb3MsIG5vIHRpZW5lIGdhbmFuY2lhcy4gU2kgdW5hIHBlcnNvbmEgZ2FuYSAkMTAwMCwgcHVlZGUgZGVjaXJzZSBxdWUgZ2FuYSBlbCBkb2JsZSBxdWUgYWxndWllbiBxdWUgZ2FuYSAkNTAwLgogICAgICAuY29sLWxnLTIuY29sLTY6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ1LnN2ZycsIGFsdD0nJykKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTEubWItbGctMC5tYi0zLmQtbGctYmxvY2suZC1ub25lOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80Ni5zdmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctMTE6IHAubWItMCBFbCBhbsOhbGlzaXMgZXN0YWTDrXN0aWNvIGRlIGxhcyB2YXJpYWJsZXMgZGUgcmF6w7NuIHBlcm1pdGUgcmVhbGl6YXIgY3VhbHF1aWVyIHRpcG8gZGUgb3BlcmFjacOzbiBtYXRlbcOhdGljYSB5IGFwbGljYXIgdMOpY25pY2FzIGF2YW56YWRhcyBkZSBhbsOhbGlzaXMsIGNvbW8gcmVncmVzacOzbiB5IGNvcnJlbGFjacOzbi4gUG9yIGVqZW1wbG8sIHNlIHB1ZWRlIGNhbGN1bGFyIGVsIHByb21lZGlvIGRlIGluZ3Jlc29zIGRlIHVuIGdydXBvIGRlIHBlcnNvbmFzIG8gZGV0ZXJtaW5hciBsYSByZWxhY2nDs24gZW50cmUgZWwgcGVzbyBkZSB1biBncnVwbyBkZSBwZXJzb25hcyB5IHN1IGFsdHVyYS4KICAgIFNlcGFyYWRvcgogICAgI3RfMl81LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiAyLjUJSW1wb3J0YW5jaWEgZGUgbG9zIG5pdmVsZXMgZGUgbWVkaWNpw7NuIGVuIGVsIGFuw6FsaXNpcyBlc3RhZMOtc3RpY28KICAgIHAubWItNShkYXRhLWFvcz0nZmFkZS1yaWdodCcpIEVsIG5pdmVsIGRlIG1lZGljacOzbiBkZSB1bmEgdmFyaWFibGUgdGllbmUgdW4gaW1wYWN0byBkaXJlY3RvIGVuIGVsIHRpcG8gZGUgYW7DoWxpc2lzIHF1ZSBzZSBwdWVkZSByZWFsaXphci4gU2VsZWNjaW9uYXIgZWwgbcOpdG9kbyBlc3RhZMOtc3RpY28gYWRlY3VhZG8gZGVwZW5kZSBkZSBjb25vY2VyIGNvcnJlY3RhbWVudGUgZWwgbml2ZWwgZGUgbWVkaWNpw7NuIGRlIGxhcyB2YXJpYWJsZXMgaW52b2x1Y3JhZGFzLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00LmNvbC03Lm1iLWxnLTAubWItMzogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDcucG5nJywgYWx0PScnKQogICAgICAuY29sLWxnLTgKICAgICAgICAudGFyamV0YShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0YzRjBFQSIpLnAtNC5tYi00CiAgICAgICAgICBoNSBFamVtcGxvCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IubWItMAogICAgICAgICAgICBsaS5kLWZsZXgubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBWYXJpYWJsZXMgbm9taW5hbGVzOl0gc2UgYW5hbGl6YW4gdXNhbmRvIGZyZWN1ZW5jaWFzIHkgcHJvcG9yY2lvbmVzLgogICAgICAgICAgICBsaS5kLWZsZXgubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgcC5tYi0wICNbYiBWYXJpYWJsZXMgb3JkaW5hbGVzOl0gc2UgcHVlZGVuIHJlc3VtaXIgdXRpbGl6YW5kbyBsYSBtZWRpYW5hIHkgcmVhbGl6YXIgYW7DoWxpc2lzIG5vIHBhcmFtw6l0cmljb3MuCiAgICAgICAgICAgIGxpLmQtZmxleC5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICBwLm1iLTAgI1tiIFZhcmlhYmxlcyBkZSBpbnRlcnZhbG8geSBkZSByYXrDs246XSBzZSB1dGlsaXphbiBwYXJhIGFuw6FsaXNpcyBlc3RhZMOtc3RpY29zIGF2YW56YWRvcyBxdWUgaW5jbHV5ZW4gbWVkaWRhcyBkZSB0ZW5kZW5jaWEgY2VudHJhbCwgZGlzcGVyc2nDs24geSBwcnVlYmFzIHBhcmFtw6l0cmljYXMuCiAgICAgICAgcC5tYi0wIENvbXByZW5kZXIgZWwgbml2ZWwgZGUgbWVkaWNpw7NuIGVzIGZ1bmRhbWVudGFsIHBhcmEgZXZpdGFyIGVycm9yZXMgZW4gbGEgaW50ZXJwcmV0YWNpw7NuIGRlIGxvcyByZXN1bHRhZG9zIHkgcGFyYSBnYXJhbnRpemFyIHF1ZSBsYXMgb3BlcmFjaW9uZXMgZXN0YWTDrXN0aWNhcyBhcGxpY2FkYXMgc2VhbiBsYXMgY29ycmVjdGFzLgoKCgoKCg=="},null]}